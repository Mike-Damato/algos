const minMalwareSpread = (graph, initial) => {
  const m = graph.length;
  const n = graph[0].length;
  const map = new Map();

  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (graph[i][j] === 1 && i !== j) {
        if (!map.has(i)) {
          map.set(i, new Set());
        }
        if (!map.has(j)) {
          map.set(j, new Set());
        }
        map.get(i).add(j);
        map.get(j).add(i);
      }
    }
  }

  const bfs = (infectionList) => {
    const malware = new Set(infectionList);
    const queue = [...infectionList];
    while (queue.length) {
      let node = queue.shift();
      if (map.has(node)) {
        for (const neighbor of map.get(node)) {
          if (!malware.has(neighbor)) {
            queue.push(neighbor);
            malware.add(neighbor);
          }
        }
      }
    }
    return malware.size;
  };
  // console.log(map)
  initial.sort((a, b) => a - b);
  const initSet = new Set(initial);
  let infected = bfs(initial);
  let minInfected = infected;
  let minNode = initial[0];

  for (let i = 0; i < initial.length; i++) {
    let testNode = initial[i];
    initSet.delete(testNode);
    let temp = [...initSet];
    infected = bfs(temp);
    if (infected < minInfected) {
      minNode = testNode;
      minInfected = infected;
    }
    initSet.add(testNode);
  }
  return minNode;
};
